#!/bin/bash

# --- C·∫§U H√åNH ---
APP_DIR="/home/apidownload"
APP_FILE="app.py"
APP_URL="https://raw.githubusercontent.com/tocongtruong/apidownload/refs/heads/main/app.py"

SERVICE_NAME="apidownload"

read -p "üîπ Nh·∫≠p domain b·∫°n mu·ªën d√πng (v√≠ d·ª•: api.domain.com): " DOMAIN

# L·∫•y IP VPS
SERVER_IP=$(curl -s ifconfig.me)
DOMAIN_IP=$(dig +short "$DOMAIN" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)

echo "üîç Ki·ªÉm tra domain $DOMAIN c√≥ tr·ªè v·ªÅ IP VPS ($SERVER_IP)..."
if [ "$DOMAIN_IP" != "$SERVER_IP" ]; then
    echo "‚ùå Domain ch∆∞a tr·ªè ƒë√∫ng IP VPS. IP hi·ªán t·∫°i: $DOMAIN_IP"
    exit 1
fi

echo "‚úÖ Domain h·ª£p l·ªá. B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t..."

# C√†i g√≥i c·∫ßn thi·∫øt
apt update
apt upgrade
apt install -y curl python3 python3-pip python3-venv nginx certbot python3-certbot-nginx

# T·∫°o th∆∞ m·ª•c app
mkdir -p $APP_DIR

# T·∫£i app.py t·ª´ GitHub
echo "üì• ƒêang t·∫£i app.py t·ª´ $APP_URL..."
curl -sL "$APP_URL" -o "$APP_DIR/$APP_FILE"

# T·∫°o virtualenv & c√†i requirements
cd "$APP_DIR"
python3 -m venv venv
source venv/bin/activate

cat <<EOF > requirements.txt
Flask==3.0.3
gdown==5.2.0
yt-dlp==2024.10.22
requests==2.32.3
certifi==2024.8.30
urllib3==2.2.3
EOF

pip install --upgrade pip
pip install -r requirements.txt

# T·∫°o systemd service
echo "‚öôÔ∏è T·∫°o systemd service $SERVICE_NAME"
cat <<EOF > /etc/systemd/system/${SERVICE_NAME}.service
[Unit]
Description=Flask Downloader Service
After=network.target

[Service]
User=root
WorkingDirectory=$APP_DIR
Environment="PATH=$APP_DIR/venv/bin"
ExecStart=$APP_DIR/venv/bin/python $APP_FILE
Restart=always

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reexec
systemctl daemon-reload
systemctl enable $SERVICE_NAME
systemctl restart $SERVICE_NAME

# C·∫•u h√¨nh nginx
echo "üåê T·∫°o c·∫•u h√¨nh nginx cho $DOMAIN"
cat <<EOF > /etc/nginx/sites-available/$DOMAIN
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
}
EOF

ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
nginx -t && systemctl reload nginx

# SSL certbot
echo "üîê C·∫•p ch·ª©ng ch·ªâ SSL Let's Encrypt"
certbot --nginx -d $DOMAIN --non-interactive --agree-tos -m admin@$DOMAIN

# Thi·∫øt l·∫≠p t·ª± ƒë·ªông gia h·∫°n SSL b·∫±ng cron
echo "üîÅ ƒê·∫£m b·∫£o cron job t·ª± ƒë·ªông gia h·∫°n SSL t·ªìn t·∫°i..."
CRON_JOB="0 3 * * * certbot renew --quiet --deploy-hook \"systemctl reload nginx\""

# Ch·ªâ th√™m n·∫øu ch∆∞a c√≥
if ! crontab -l 2>/dev/null | grep -Fq "certbot renew"; then
    (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -
    echo "‚úÖ ƒê√£ th√™m cron job t·ª± ƒë·ªông gia h·∫°n SSL v√†o crontab"
else
    echo "‚úÖ Cron job ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i"
fi

echo ""
echo "‚úÖ Ho√†n t·∫•t! API Flask ƒëang ch·∫°y t·∫°i: https://$DOMAIN"
